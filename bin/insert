#!/usr/bin/env ruby
require "sqlite3"

DB = SQLite3::Database.new "#{__dir__}/../_database.db"

puts "Title> "
title = gets.chomp
file_guess = title.downcase.gsub(" ", "-") + ".jpg"

puts "File (#{file_guess})> "
file_res = gets.chomp

file = file_res.empty? ? file_guess : file_res

puts "Description> "
desc = gets.chomp

DB.execute("SELECT title FROM albums").each { |album| puts album[0] }

puts "Album Title (creates new album if not available)> "
album = gets.chomp

album_exists = DB.execute(%Q(
SELECT EXISTS(SELECT 1 FROM albums WHERE title = ?)
), [album])[0][0]

if album_exists == 0
  puts "The album \"#{album}\" doesn't exist yet. Please provide details."
  puts "The title will be \"#{album}\". The cover photo will be the new one."
  puts "URL ID> "
  alb_url_id = gets.chomp
  puts "Description> "
  alb_desc = gets.chomp
end

begin
  DB.transaction

  DB.execute %Q(INSERT INTO photos (title, file, details) VALUES (?, ?, ?)), [
    title, file, desc
  ]
  photo_id = DB.last_insert_row_id

  if album_exists == 0
    DB.execute %Q(
    INSERT INTO albums (url_id, title, description, cover_photo_id)
    VALUES (?, ?, ?, ?)
    ), [alb_url_id, album, alb_desc, photo_id]
    album_id = DB.last_insert_row_id
  else
    album_id = DB.execute(%Q(
    SELECT id FROM albums WHERE title = ? LIMIT 1
    ), [album])
  end

  position = DB.execute(%Q(
  SELECT COALESCE(MAX(position), 0) + 1 FROM photos_albums WHERE album_id = ?
  ), [album_id])[0][0]
  DB.execute %Q(
  INSERT INTO photos_albums (album_id, photo_id, position) VALUES (?, ?, ?)
  ), [album_id, photo_id, position]

  DB.commit
rescue SQLite3::Exception => e
  DB.rollback
  puts "Error: #{e.message}"
ensure
  DB.close
end
